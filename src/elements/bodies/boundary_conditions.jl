"""
    enforce_no_flow_through!(b::ConformalBody, motion, elements, t)

Update the body, `b`, to enforce the no-flow-through condition given ambient vortex elements, `elements`, and while moving with kinematics specified by `motion`.

# Example

```jldoctest
julia> p = Bodies.Polygon([-1.0,0.2,1.0,-1.0],[-1.0,-1.0,0.5,1.0])
Polygon with 4 vertices at
             (-1.0,-1.0) (0.2,-1.0) (1.0,0.5) (-1.0,1.0)
             interior angles/π = [0.5, 0.656, 0.422, 0.422]

julia> b = Bodies.ConformalBody(p)
Body generated by: Schwarz-Christoffel map of unit circle to exterior of polygon with 4 vertices

  centroid at 0.0 + 0.0im
  angle 0.0

julia> motion = RigidBodyMotion(1.0, 0.0);

julia> point = Vortex.Point(0.0 + 2im, 1.0);

julia> Bodies.enforce_no_flow_through!(b, motion, point, 0.0)

julia> b.img
1-element Array{PotentialFlow.Points.Point,1}:
 Vortex.Point(0.0 + 0.5im, -1.0)
```
"""
function enforce_no_flow_through!(b::ConformalBody, ṗ, elements, t)
    @get ṗ (ċ, α̇)

    # should set up images here

    b.ċ = ċ
    b.α̇ = α̇

    get_image!(b,elements)

    nothing
end

Elements.image(z::Complex128,b::ConformalBody) = 1.0/conj(z)

Elements.image(s::T,b::ConformalBody) where T <: Union{Blob,Point} = Elements.image(s.z,b)


function get_image!(b::ConformalBody, sources::T) where T <: Union{Tuple, AbstractArray}
    b.img = Points.Point[]
    for source in sources
        get_image!(b.img,source,b)
    end
    nothing
end

function get_image!(b::ConformalBody, source::T) where T <: Union{Blob,Point}
  get_image!(b.img,source,b)
end

get_image!(tmp,src,b::ConformalBody) = get_image!(tmp,Elements.unwrap_src(src), b, kind(Elements.unwrap_src(src)))

function get_image!(tmp,src,b::ConformalBody,::Type{Singleton})
  push!(tmp,get_image(src,b))
end


function get_image!(tmp,src,b::ConformalBody,::Type{Group})
  for i in eachindex(src)
      push!(tmp,get_image(src[i], b))
  end
end

function get_image(src::Union{Blob{T},Point{T}}, b::ConformalBody) where T <: Complex
    Point{T}(Elements.image(src.z,b),src.S)
end

function get_image(src::Union{Blob{T},Point{T}}, b::ConformalBody) where T <: Real
    Point{T}(Elements.image(src.z,b),-src.S)
end
